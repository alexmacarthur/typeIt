// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Initial queue only contains startDelay pause. 1`] = `
Array [
  [Function],
]
`;

exports[`Returns an object with expected properties. 1`] = `
Array [
  "break",
  "delete",
  "destroy",
  "empty",
  "exec",
  "freeze",
  "getElement",
  "getOptions",
  "getQueue",
  "go",
  "is",
  "move",
  "options",
  "pause",
  "reset",
  "type",
  "unfreeze",
  "updateOptions",
]
`;

exports[`Should skip over empty strings. 1`] = `
Array [
  [Function],
  [Function],
  [Function],
  [Function],
  [Function],
  [Function],
]
`;

exports[`break() Should should queue break character object. 1`] = `
Array [
  [Function],
  [Function],
]
`;

exports[`delete() Should bookend action with same options when no options passed. 1`] = `
Array [
  [Function],
  [Function],
  [Function],
  [Function],
]
`;

exports[`delete() Should queue pause after string when defined. 1`] = `[Function]`;

exports[`delete() Should queue pause correctly when options are passed. 1`] = `[Function]`;

exports[`delete() Should queue pause correctly when single digit is passed. 1`] = `[Function]`;

exports[`delete() Should temporarily update options when specified. 1`] = `
Array [
  [Function],
  [Function],
  [Function],
  [Function],
]
`;

exports[`empty() addSplitPause() Adds different even split pause around strings. 1`] = `
Array [
  [Function],
  [Function],
  [Function],
  [Function],
  [Function],
  [Function],
]
`;

exports[`empty() addSplitPause() Adds even split pause around strings. 1`] = `
Array [
  [Function],
]
`;

exports[`empty() addSplitPause() Adds split pause around strings when value is array. 1`] = `
Array [
  [Function],
  [Function],
  [Function],
  [Function],
  [Function],
  [Function],
]
`;

exports[`empty() addSplitPause() Inserts split pause around multiple strings. 1`] = `
Array [
  [Function],
  [Function],
  [Function],
  [Function],
  [Function],
  [Function],
  [Function],
  [Function],
  [Function],
  [Function],
  [Function],
  [Function],
  [Function],
  [Function],
  [Function],
  [Function],
  [Function],
  [Function],
]
`;

exports[`move() Should bookend action with same options when no options passed. 1`] = `
Array [
  [Function],
  [Function],
  [Function],
  [Function],
]
`;

exports[`move() Should queue pause after string when defined. 1`] = `[Function]`;

exports[`move() Should queue pause correctly when options are passed. 1`] = `[Function]`;

exports[`move() Should temporarily update options when specified. 1`] = `
Array [
  [Function],
  [Function],
  [Function],
  [Function],
]
`;

exports[`reset() Successfully resets when called. 1`] = `
Object {
  "afterComplete": [Function],
  "afterStep": [Function],
  "afterString": [Function],
  "beforeStep": [Function],
  "beforeString": [Function],
  "breakLines": true,
  "cursor": true,
  "cursorChar": "|",
  "cursorSpeed": 1000,
  "deleteSpeed": null,
  "html": true,
  "lifeLike": true,
  "loop": false,
  "loopDelay": Array [
    375,
    375,
  ],
  "nextStringDelay": Array [
    375,
    375,
  ],
  "speed": 100,
  "startDelay": 250,
  "startDelete": false,
  "strings": Array [
    "This is my string!",
  ],
  "waitUntilVisible": false,
}
`;

exports[`type() Should bookend action with same options when no options passed. 1`] = `
Array [
  [Function],
  [Function],
  [Function],
  [Function],
]
`;

exports[`type() Should queue pause after string when defined. 1`] = `[Function]`;

exports[`type() Should queue pause correctly when options are passed. 1`] = `[Function]`;

exports[`type() Should temporarily update options when specified. 1`] = `
Array [
  [Function],
  [Function],
  [Function],
  [Function],
]
`;
