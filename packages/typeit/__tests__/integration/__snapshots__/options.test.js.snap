// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`html option It should leave strings be when option is disabled. 1`] = `
Array [
  Array [
    [Function],
    250,
    Object {},
  ],
  Array [
    [Function],
    Object {
      "chars": Array [
        Object {
          "content": "T",
          "node": null,
        },
        Object {
          "content": "h",
          "node": null,
        },
        Object {
          "content": "i",
          "node": null,
        },
        Object {
          "content": "s",
          "node": null,
        },
        Object {
          "content": " ",
          "node": null,
        },
        Object {
          "content": "i",
          "node": null,
        },
        Object {
          "content": "s",
          "node": null,
        },
        Object {
          "content": " ",
          "node": null,
        },
        Object {
          "content": "a",
          "node": null,
        },
        Object {
          "content": " ",
          "node": null,
        },
        Object {
          "content": "<",
          "node": null,
        },
        Object {
          "content": "s",
          "node": null,
        },
        Object {
          "content": "t",
          "node": null,
        },
        Object {
          "content": "r",
          "node": null,
        },
        Object {
          "content": "o",
          "node": null,
        },
        Object {
          "content": "n",
          "node": null,
        },
        Object {
          "content": "g",
          "node": null,
        },
        Object {
          "content": ">",
          "node": null,
        },
        Object {
          "content": "a",
          "node": null,
        },
        Object {
          "content": "n",
          "node": null,
        },
        Object {
          "content": "o",
          "node": null,
        },
        Object {
          "content": "t",
          "node": null,
        },
        Object {
          "content": "h",
          "node": null,
        },
        Object {
          "content": "e",
          "node": null,
        },
        Object {
          "content": "r",
          "node": null,
        },
        Object {
          "content": " ",
          "node": null,
        },
        Object {
          "content": "B",
          "node": null,
        },
        Object {
          "content": "O",
          "node": null,
        },
        Object {
          "content": "L",
          "node": null,
        },
        Object {
          "content": "D",
          "node": null,
        },
        Object {
          "content": "<",
          "node": null,
        },
        Object {
          "content": "/",
          "node": null,
        },
        Object {
          "content": "s",
          "node": null,
        },
        Object {
          "content": "t",
          "node": null,
        },
        Object {
          "content": "r",
          "node": null,
        },
        Object {
          "content": "o",
          "node": null,
        },
        Object {
          "content": "n",
          "node": null,
        },
        Object {
          "content": "g",
          "node": null,
        },
        Object {
          "content": ">",
          "node": null,
        },
        Object {
          "content": " ",
          "node": null,
        },
        Object {
          "content": "s",
          "node": null,
        },
        Object {
          "content": "t",
          "node": null,
        },
        Object {
          "content": "r",
          "node": null,
        },
        Object {
          "content": "i",
          "node": null,
        },
        Object {
          "content": "n",
          "node": null,
        },
        Object {
          "content": "g",
          "node": null,
        },
        Object {
          "content": ".",
          "node": null,
        },
      ],
    },
    Object {
      "freezeCursor": true,
    },
  ],
]
`;

exports[`html option It should queue strings as HTML by default. 1`] = `
Array [
  Array [
    [Function],
    250,
    Object {},
  ],
  Array [
    [Function],
    Object {
      "chars": Array [
        Object {
          "content": "T",
          "node": This is a ,
        },
        Object {
          "content": "h",
          "node": This is a ,
        },
        Object {
          "content": "i",
          "node": This is a ,
        },
        Object {
          "content": "s",
          "node": This is a ,
        },
        Object {
          "content": " ",
          "node": This is a ,
        },
        Object {
          "content": "i",
          "node": This is a ,
        },
        Object {
          "content": "s",
          "node": This is a ,
        },
        Object {
          "content": " ",
          "node": This is a ,
        },
        Object {
          "content": "a",
          "node": This is a ,
        },
        Object {
          "content": " ",
          "node": This is a ,
        },
        Object {
          "content": "B",
          "node": BOLD,
        },
        Object {
          "content": "O",
          "node": BOLD,
        },
        Object {
          "content": "L",
          "node": BOLD,
        },
        Object {
          "content": "D",
          "node": BOLD,
        },
        Object {
          "content": " ",
          "node":  string.,
        },
        Object {
          "content": "s",
          "node":  string.,
        },
        Object {
          "content": "t",
          "node":  string.,
        },
        Object {
          "content": "r",
          "node":  string.,
        },
        Object {
          "content": "i",
          "node":  string.,
        },
        Object {
          "content": "n",
          "node":  string.,
        },
        Object {
          "content": "g",
          "node":  string.,
        },
        Object {
          "content": ".",
          "node":  string.,
        },
      ],
    },
    Object {
      "freezeCursor": true,
    },
  ],
]
`;

exports[`html option It should queue strings as HTML when explicitly set. 1`] = `
Array [
  Array [
    [Function],
    250,
    Object {},
  ],
  Array [
    [Function],
    Object {
      "chars": Array [
        Object {
          "content": "T",
          "node": This is a ,
        },
        Object {
          "content": "h",
          "node": This is a ,
        },
        Object {
          "content": "i",
          "node": This is a ,
        },
        Object {
          "content": "s",
          "node": This is a ,
        },
        Object {
          "content": " ",
          "node": This is a ,
        },
        Object {
          "content": "i",
          "node": This is a ,
        },
        Object {
          "content": "s",
          "node": This is a ,
        },
        Object {
          "content": " ",
          "node": This is a ,
        },
        Object {
          "content": "a",
          "node": This is a ,
        },
        Object {
          "content": " ",
          "node": This is a ,
        },
        Object {
          "content": "a",
          "node": another BOLD,
        },
        Object {
          "content": "n",
          "node": another BOLD,
        },
        Object {
          "content": "o",
          "node": another BOLD,
        },
        Object {
          "content": "t",
          "node": another BOLD,
        },
        Object {
          "content": "h",
          "node": another BOLD,
        },
        Object {
          "content": "e",
          "node": another BOLD,
        },
        Object {
          "content": "r",
          "node": another BOLD,
        },
        Object {
          "content": " ",
          "node": another BOLD,
        },
        Object {
          "content": "B",
          "node": another BOLD,
        },
        Object {
          "content": "O",
          "node": another BOLD,
        },
        Object {
          "content": "L",
          "node": another BOLD,
        },
        Object {
          "content": "D",
          "node": another BOLD,
        },
        Object {
          "content": " ",
          "node":  string.,
        },
        Object {
          "content": "s",
          "node":  string.,
        },
        Object {
          "content": "t",
          "node":  string.,
        },
        Object {
          "content": "r",
          "node":  string.,
        },
        Object {
          "content": "i",
          "node":  string.,
        },
        Object {
          "content": "n",
          "node":  string.,
        },
        Object {
          "content": "g",
          "node":  string.,
        },
        Object {
          "content": ".",
          "node":  string.,
        },
      ],
    },
    Object {
      "freezeCursor": true,
    },
  ],
]
`;

exports[`startDelete option. Correctly adds strings also defined by type() companion method. 1`] = `
Array [
  Array [
    [Function],
    250,
    Object {},
  ],
  Array [
    [Function],
    Object {
      "chars": Array [
        Object {
          "content": "T",
          "node": This should be typed first.,
        },
        Object {
          "content": "h",
          "node": This should be typed first.,
        },
        Object {
          "content": "i",
          "node": This should be typed first.,
        },
        Object {
          "content": "s",
          "node": This should be typed first.,
        },
        Object {
          "content": " ",
          "node": This should be typed first.,
        },
        Object {
          "content": "s",
          "node": This should be typed first.,
        },
        Object {
          "content": "h",
          "node": This should be typed first.,
        },
        Object {
          "content": "o",
          "node": This should be typed first.,
        },
        Object {
          "content": "u",
          "node": This should be typed first.,
        },
        Object {
          "content": "l",
          "node": This should be typed first.,
        },
        Object {
          "content": "d",
          "node": This should be typed first.,
        },
        Object {
          "content": " ",
          "node": This should be typed first.,
        },
        Object {
          "content": "b",
          "node": This should be typed first.,
        },
        Object {
          "content": "e",
          "node": This should be typed first.,
        },
        Object {
          "content": " ",
          "node": This should be typed first.,
        },
        Object {
          "content": "t",
          "node": This should be typed first.,
        },
        Object {
          "content": "y",
          "node": This should be typed first.,
        },
        Object {
          "content": "p",
          "node": This should be typed first.,
        },
        Object {
          "content": "e",
          "node": This should be typed first.,
        },
        Object {
          "content": "d",
          "node": This should be typed first.,
        },
        Object {
          "content": " ",
          "node": This should be typed first.,
        },
        Object {
          "content": "f",
          "node": This should be typed first.,
        },
        Object {
          "content": "i",
          "node": This should be typed first.,
        },
        Object {
          "content": "r",
          "node": This should be typed first.,
        },
        Object {
          "content": "s",
          "node": This should be typed first.,
        },
        Object {
          "content": "t",
          "node": This should be typed first.,
        },
        Object {
          "content": ".",
          "node": This should be typed first.,
        },
      ],
    },
    Object {
      "freezeCursor": true,
    },
  ],
  Array [
    [Function],
    375,
    Object {},
  ],
  Array [
    [Function],
    Object {
      "chars": Array [
        Object {
          "content": <br />,
          "node": null,
        },
      ],
      "silent": true,
    },
    Object {
      "freezeCursor": true,
    },
  ],
  Array [
    [Function],
    375,
    Object {},
  ],
  Array [
    [Function],
    Object {
      "chars": Array [
        Object {
          "content": "T",
          "node": This is another string.,
        },
        Object {
          "content": "h",
          "node": This is another string.,
        },
        Object {
          "content": "i",
          "node": This is another string.,
        },
        Object {
          "content": "s",
          "node": This is another string.,
        },
        Object {
          "content": " ",
          "node": This is another string.,
        },
        Object {
          "content": "i",
          "node": This is another string.,
        },
        Object {
          "content": "s",
          "node": This is another string.,
        },
        Object {
          "content": " ",
          "node": This is another string.,
        },
        Object {
          "content": "a",
          "node": This is another string.,
        },
        Object {
          "content": "n",
          "node": This is another string.,
        },
        Object {
          "content": "o",
          "node": This is another string.,
        },
        Object {
          "content": "t",
          "node": This is another string.,
        },
        Object {
          "content": "h",
          "node": This is another string.,
        },
        Object {
          "content": "e",
          "node": This is another string.,
        },
        Object {
          "content": "r",
          "node": This is another string.,
        },
        Object {
          "content": " ",
          "node": This is another string.,
        },
        Object {
          "content": "s",
          "node": This is another string.,
        },
        Object {
          "content": "t",
          "node": This is another string.,
        },
        Object {
          "content": "r",
          "node": This is another string.,
        },
        Object {
          "content": "i",
          "node": This is another string.,
        },
        Object {
          "content": "n",
          "node": This is another string.,
        },
        Object {
          "content": "g",
          "node": This is another string.,
        },
        Object {
          "content": ".",
          "node": This is another string.,
        },
      ],
    },
    Object {
      "freezeCursor": true,
    },
  ],
  Array [
    [Function],
    Object {},
    Object {},
  ],
  Array [
    [Function],
    Object {
      "chars": Array [
        Object {
          "content": "A",
          "node": And finally, a third.,
        },
        Object {
          "content": "n",
          "node": And finally, a third.,
        },
        Object {
          "content": "d",
          "node": And finally, a third.,
        },
        Object {
          "content": " ",
          "node": And finally, a third.,
        },
        Object {
          "content": "f",
          "node": And finally, a third.,
        },
        Object {
          "content": "i",
          "node": And finally, a third.,
        },
        Object {
          "content": "n",
          "node": And finally, a third.,
        },
        Object {
          "content": "a",
          "node": And finally, a third.,
        },
        Object {
          "content": "l",
          "node": And finally, a third.,
        },
        Object {
          "content": "l",
          "node": And finally, a third.,
        },
        Object {
          "content": "y",
          "node": And finally, a third.,
        },
        Object {
          "content": ",",
          "node": And finally, a third.,
        },
        Object {
          "content": " ",
          "node": And finally, a third.,
        },
        Object {
          "content": "a",
          "node": And finally, a third.,
        },
        Object {
          "content": " ",
          "node": And finally, a third.,
        },
        Object {
          "content": "t",
          "node": And finally, a third.,
        },
        Object {
          "content": "h",
          "node": And finally, a third.,
        },
        Object {
          "content": "i",
          "node": And finally, a third.,
        },
        Object {
          "content": "r",
          "node": And finally, a third.,
        },
        Object {
          "content": "d",
          "node": And finally, a third.,
        },
        Object {
          "content": ".",
          "node": And finally, a third.,
        },
      ],
      "instant": undefined,
    },
    Object {
      "freezeCursor": true,
    },
  ],
  Array [
    [Function],
    Object {
      "afterComplete": [Function],
      "afterStep": [Function],
      "afterString": [Function],
      "beforeStep": [Function],
      "beforeString": [Function],
      "breakLines": true,
      "cursor": true,
      "cursorChar": "|",
      "cursorSpeed": 1000,
      "deleteSpeed": null,
      "html": true,
      "lifeLike": true,
      "loop": false,
      "loopDelay": Array [
        375,
        375,
      ],
      "nextStringDelay": Array [
        375,
        375,
      ],
      "speed": 100,
      "startDelay": 250,
      "startDelete": false,
      "strings": Array [
        "This should be typed first.",
        "This is another string.",
      ],
      "waitUntilVisible": false,
    },
    Object {},
  ],
]
`;

exports[`startDelete option. Makes hard-coded string the first string to be typed. 1`] = `
Array [
  Array [
    [Function],
    250,
    Object {},
  ],
  Array [
    [Function],
    Object {
      "chars": Array [
        Object {
          "content": "T",
          "node": This should be typed first.,
        },
        Object {
          "content": "h",
          "node": This should be typed first.,
        },
        Object {
          "content": "i",
          "node": This should be typed first.,
        },
        Object {
          "content": "s",
          "node": This should be typed first.,
        },
        Object {
          "content": " ",
          "node": This should be typed first.,
        },
        Object {
          "content": "s",
          "node": This should be typed first.,
        },
        Object {
          "content": "h",
          "node": This should be typed first.,
        },
        Object {
          "content": "o",
          "node": This should be typed first.,
        },
        Object {
          "content": "u",
          "node": This should be typed first.,
        },
        Object {
          "content": "l",
          "node": This should be typed first.,
        },
        Object {
          "content": "d",
          "node": This should be typed first.,
        },
        Object {
          "content": " ",
          "node": This should be typed first.,
        },
        Object {
          "content": "b",
          "node": This should be typed first.,
        },
        Object {
          "content": "e",
          "node": This should be typed first.,
        },
        Object {
          "content": " ",
          "node": This should be typed first.,
        },
        Object {
          "content": "t",
          "node": This should be typed first.,
        },
        Object {
          "content": "y",
          "node": This should be typed first.,
        },
        Object {
          "content": "p",
          "node": This should be typed first.,
        },
        Object {
          "content": "e",
          "node": This should be typed first.,
        },
        Object {
          "content": "d",
          "node": This should be typed first.,
        },
        Object {
          "content": " ",
          "node": This should be typed first.,
        },
        Object {
          "content": "f",
          "node": This should be typed first.,
        },
        Object {
          "content": "i",
          "node": This should be typed first.,
        },
        Object {
          "content": "r",
          "node": This should be typed first.,
        },
        Object {
          "content": "s",
          "node": This should be typed first.,
        },
        Object {
          "content": "t",
          "node": This should be typed first.,
        },
        Object {
          "content": ".",
          "node": This should be typed first.,
        },
      ],
    },
    Object {
      "freezeCursor": true,
    },
  ],
]
`;

exports[`startDelete option. Sets both hard-coded and option-defined strings in correct order. 1`] = `
Array [
  Array [
    [Function],
    250,
    Object {},
  ],
  Array [
    [Function],
    Object {
      "chars": Array [
        Object {
          "content": "T",
          "node": This should be typed first.,
        },
        Object {
          "content": "h",
          "node": This should be typed first.,
        },
        Object {
          "content": "i",
          "node": This should be typed first.,
        },
        Object {
          "content": "s",
          "node": This should be typed first.,
        },
        Object {
          "content": " ",
          "node": This should be typed first.,
        },
        Object {
          "content": "s",
          "node": This should be typed first.,
        },
        Object {
          "content": "h",
          "node": This should be typed first.,
        },
        Object {
          "content": "o",
          "node": This should be typed first.,
        },
        Object {
          "content": "u",
          "node": This should be typed first.,
        },
        Object {
          "content": "l",
          "node": This should be typed first.,
        },
        Object {
          "content": "d",
          "node": This should be typed first.,
        },
        Object {
          "content": " ",
          "node": This should be typed first.,
        },
        Object {
          "content": "b",
          "node": This should be typed first.,
        },
        Object {
          "content": "e",
          "node": This should be typed first.,
        },
        Object {
          "content": " ",
          "node": This should be typed first.,
        },
        Object {
          "content": "t",
          "node": This should be typed first.,
        },
        Object {
          "content": "y",
          "node": This should be typed first.,
        },
        Object {
          "content": "p",
          "node": This should be typed first.,
        },
        Object {
          "content": "e",
          "node": This should be typed first.,
        },
        Object {
          "content": "d",
          "node": This should be typed first.,
        },
        Object {
          "content": " ",
          "node": This should be typed first.,
        },
        Object {
          "content": "f",
          "node": This should be typed first.,
        },
        Object {
          "content": "i",
          "node": This should be typed first.,
        },
        Object {
          "content": "r",
          "node": This should be typed first.,
        },
        Object {
          "content": "s",
          "node": This should be typed first.,
        },
        Object {
          "content": "t",
          "node": This should be typed first.,
        },
        Object {
          "content": ".",
          "node": This should be typed first.,
        },
      ],
    },
    Object {
      "freezeCursor": true,
    },
  ],
  Array [
    [Function],
    375,
    Object {},
  ],
  Array [
    [Function],
    Object {
      "chars": Array [
        Object {
          "content": <br />,
          "node": null,
        },
      ],
      "silent": true,
    },
    Object {
      "freezeCursor": true,
    },
  ],
  Array [
    [Function],
    375,
    Object {},
  ],
  Array [
    [Function],
    Object {
      "chars": Array [
        Object {
          "content": "T",
          "node": This is another string.,
        },
        Object {
          "content": "h",
          "node": This is another string.,
        },
        Object {
          "content": "i",
          "node": This is another string.,
        },
        Object {
          "content": "s",
          "node": This is another string.,
        },
        Object {
          "content": " ",
          "node": This is another string.,
        },
        Object {
          "content": "i",
          "node": This is another string.,
        },
        Object {
          "content": "s",
          "node": This is another string.,
        },
        Object {
          "content": " ",
          "node": This is another string.,
        },
        Object {
          "content": "a",
          "node": This is another string.,
        },
        Object {
          "content": "n",
          "node": This is another string.,
        },
        Object {
          "content": "o",
          "node": This is another string.,
        },
        Object {
          "content": "t",
          "node": This is another string.,
        },
        Object {
          "content": "h",
          "node": This is another string.,
        },
        Object {
          "content": "e",
          "node": This is another string.,
        },
        Object {
          "content": "r",
          "node": This is another string.,
        },
        Object {
          "content": " ",
          "node": This is another string.,
        },
        Object {
          "content": "s",
          "node": This is another string.,
        },
        Object {
          "content": "t",
          "node": This is another string.,
        },
        Object {
          "content": "r",
          "node": This is another string.,
        },
        Object {
          "content": "i",
          "node": This is another string.,
        },
        Object {
          "content": "n",
          "node": This is another string.,
        },
        Object {
          "content": "g",
          "node": This is another string.,
        },
        Object {
          "content": ".",
          "node": This is another string.,
        },
      ],
    },
    Object {
      "freezeCursor": true,
    },
  ],
]
`;
